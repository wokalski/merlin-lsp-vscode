// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Belt_HashMapString = require("bs-platform/lib/js/belt_HashMapString.js");

var LanguageClient = { };

var Commands = { };

var $$Window = { };

var ExtensionContext = { };

function key(f) {
  return f.uri.fsPath;
}

var Folder = {
  key: key
};

var Workspace = {
  Folder: Folder
};

function start(context, commands, createClient) {
  var workspaceFolders = Belt_HashMapString.make(1);
  var onDidOpenTextDocument = function ($$document) {
    var uri = $$document.uri;
    var folder = Vscode.workspace.getWorkspaceFolder(uri);
    if (folder !== undefined) {
      var folder$1 = folder;
      if (Belt_HashMapString.has(workspaceFolders, folder$1.uri.fsPath)) {
        return /* () */0;
      } else {
        var match = Curry._2(createClient, $$document, folder$1);
        if (match !== undefined) {
          var client = match;
          Belt_HashMapString.set(workspaceFolders, folder$1.uri.fsPath, client);
          client.start();
          return /* () */0;
        } else {
          return /* () */0;
        }
      }
    } else {
      return /* () */0;
    }
  };
  Vscode.workspace.onDidOpenTextDocument(onDidOpenTextDocument);
  Vscode.workspace.textDocuments.forEach(onDidOpenTextDocument);
  Vscode.workspace.onDidChangeWorkspaceFolders((function ($$event) {
          $$event.removed.forEach((function (folder) {
                  var match = Belt_HashMapString.get(workspaceFolders, folder.uri.fsPath);
                  if (match !== undefined) {
                    Belt_HashMapString.remove(workspaceFolders, folder.uri.fsPath);
                    return match.stop();
                  } else {
                    return /* () */0;
                  }
                }));
          return /* () */0;
        }));
  commands.forEach((function (param) {
          Vscode.commands.registerCommand(param[0], param[1]);
          return /* () */0;
        }));
  context.subscriptions.push({
        dispose: (function () {
            Belt_HashMapString.forEach(workspaceFolders, (function (param, client) {
                    return client.stop();
                  }));
            return Belt_HashMapString.clear(workspaceFolders);
          })
      });
  return /* () */0;
}

var MultiWorkspace = {
  FoldersMap: /* alias */0,
  start: start
};

exports.LanguageClient = LanguageClient;
exports.Commands = Commands;
exports.$$Window = $$Window;
exports.ExtensionContext = ExtensionContext;
exports.Workspace = Workspace;
exports.MultiWorkspace = MultiWorkspace;
/* vscode Not a pure module */
