// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Process = require("process");
var Child_process = require("child_process");

function exec(cmd, folder) {
  var opts = {
    cwd: folder.uri.fsPath
  };
  return Child_process.execSync(cmd, opts);
}

function existsMerlinLspInEsyEnv(folder) {
  try {
    var esyEnv = exec("esy command-env", folder);
    exec("eval " + (String(esyEnv) + " && command -v ocamlmerlin-lsp"), folder);
    return true;
  }
  catch (exn){
    return false;
  }
}

function existsMerlinLspGlobal(folder) {
  try {
    exec("command -v ocamlmerlin-lsp", folder);
    return true;
  }
  catch (exn){
    return false;
  }
}

function serverOptionsForFolder(param, folder) {
  if (existsMerlinLspInEsyEnv(folder)) {
    var match = Process.platform === "win32";
    var command = match ? "esy.cmd" : "esy";
    var args = /* array */[
      "exec-command",
      "--include-current-env",
      "ocamlmerlin-lsp"
    ];
    return {
            command: command,
            args: args,
            options: undefined
          };
  } else if (existsMerlinLspGlobal(folder)) {
    return {
            command: "ocamlmerlin-lsp",
            args: /* array */[],
            options: undefined
          };
  } else {
    return ;
  }
}

exports.serverOptionsForFolder = serverOptionsForFolder;
/* process Not a pure module */
